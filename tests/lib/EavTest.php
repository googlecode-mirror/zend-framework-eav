<?php

require_once dirname(__FILE__).'/../bootstrap.php';

/**
 * Test class for Eav.
 * Generated by PHPUnit on 2010-02-06 at 18:57:25.
 */
class EavTest extends DatabaseTestCase
{
    /**
     * @var    Eav
     * @access protected
     */
    protected $_eav;

    /**
     * Entity model
     * @var Zend_Db_Table
     * @access protected
     */
    protected $_entityTable;

    protected function getDataSet()
    {
        return $this->createXMLDataSet(TESTS_PATH . '/fixtures/eav.xml');
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        parent::setUp();
        $entityTable = new Zend_Db_Table('eav_entity');
        $entityTable->setRowClass('Eav_Row');
        $this->_entityTable = $entityTable;

        $this->_eav = new Eav($entityTable);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
        parent::tearDown();
        $pdo = $this->getDatabaseTester()->getConnection()->getConnection();
        $pdo->exec("DELETE FROM eav_entity;");
        $pdo->exec("DELETE FROM eav_entity_int;");
        $pdo->exec("DELETE FROM eav_entity_decimal;");
        $pdo->exec("DELETE FROM eav_entity_string;");
        $pdo->exec("DELETE FROM eav_entity_text;");
        $pdo->exec("DELETE FROM eav_option;");
    }

    public function testGetTableName()
    {
        $tableName = $this->_eav->getTableName($this->_entityTable);
        $this->assertEquals('eav_entity', $tableName);
    }

    public function testGetEavTableName()
    {
        $this->assertEquals('eav_entity_int', $this->_eav->getEavTableName('int'));
        $this->assertEquals('eav_entity_string', $this->_eav->getEavTableName('string'));
    }

    public function testGetEavModel()
    {
        $option = $this->_eav->getOption('secname');
        $eavModel = $this->_eav->getEavModel($option);
        $this->assertTrue($eavModel instanceof Zend_Db_Table);

        $tableName = $this->_eav->getEavTableName($option->type);
        $this->assertEquals($tableName, $eavModel->info('name'));
    }

    /**
     * @todo Implement testGetEavModels().
     */
    public function testGetEavModels() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testGetOptionType()
    {
        $option = $this->_eav->getOption('secname');
        $this->assertEquals('string', $this->_eav->getOptionType($option));
    }

    public function testGetOptionId()
    {
        $option = $this->_eav->getOption('secname');
        $this->assertEquals(1, $this->_eav->getOptionId($option));
    }

    public function testGetOptionName()
    {
        $option = $this->_eav->getOption('secname');
        $this->assertEquals('secname', $this->_eav->getOptionName($option));
    }

    public function testGetEntityId()
    {
        $entity = $this->_entityTable->find(1)->current();
        $this->assertEquals(1, $this->_eav->getEntityId($entity));
    }

    public function testGetOption()
    {
        $option = $this->_eav->getOption('secname');
        $this->assertTrue($option instanceof Zend_Db_Table_Row);
        $this->assertEquals('secname', $option->name);
    }

    /**
     * @todo Implement testCacheOption().
     */
    public function testCacheOption()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCacheOptions().
     */
    public function testCacheOptions() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testGetOptionValue()
    {
        $row = $this->_entityTable->find(1)->current();
        $secname = $this->_eav->getOptionValue($row, 'secname');
        $this->assertEquals('one secname', $secname);

        $row = $this->_entityTable->find(2)->current();
        $secname = $this->_eav->getOptionValue($row, 'secname');
        $this->assertEquals('two secname', $secname);
        
        $row = $this->_entityTable->find(3)->current();
        $secname = $this->_eav->getOptionValue($row, 'secname');
        $this->assertEquals('', $secname);
    }

    public function testSetOptionValue()
    {
        $option = $this->_eav->getOption('secname');
        $row = $this->_entityTable->find(1)->current();
        
        $values = array('changed', 'changed2');
        foreach ($values as $value) {
            $this->_eav->setOptionValue($row, $option, $value);
            $storedValue = $this->_eav->getOptionValue($row, $option, true);
            $this->assertEquals($value, $storedValue);
        }
    }

    public function testLoadOptions()
    {
        $rows = $this->_entityTable->fetchAll();
        $options = array();
        $options[] = $this->_eav->getOption('secname');
        $options[] = $this->_eav->getOption('age');

        $data = $this->_eav->loadOptions($rows, $options);

        $this->assertTrue(is_array($data));
    }
}